// <auto-generated />
using System;
using HW_10.infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HW_10.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HW_10.Models.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LibraryID")
                        .HasColumnType("int");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LibraryID");

                    b.HasIndex("MemberID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("HW_10.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("libraryId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("libraryId")
                        .IsUnique();

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("HW_10.Models.Library", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("LibraryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Librarys");
                });

            modelBuilder.Entity("HW_10.Models.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Codemeli")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_sabt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Typemember")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LibraryID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("HW_10.Models.Book", b =>
                {
                    b.HasOne("HW_10.Models.Library", null)
                        .WithMany("Books")
                        .HasForeignKey("LibraryID");

                    b.HasOne("HW_10.Models.Member", null)
                        .WithMany("Books")
                        .HasForeignKey("MemberID");
                });

            modelBuilder.Entity("HW_10.Models.City", b =>
                {
                    b.HasOne("HW_10.Models.Library", "Library")
                        .WithOne("City")
                        .HasForeignKey("HW_10.Models.City", "libraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("HW_10.Models.Member", b =>
                {
                    b.HasOne("HW_10.Models.Library", null)
                        .WithMany("Members")
                        .HasForeignKey("LibraryID");
                });

            modelBuilder.Entity("HW_10.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("City")
                        .IsRequired();

                    b.Navigation("Members");
                });

            modelBuilder.Entity("HW_10.Models.Member", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
